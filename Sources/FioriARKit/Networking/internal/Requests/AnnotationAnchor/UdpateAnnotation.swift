//
// Generated by SwagGen with template `SwiftSAPURLSession`
// https://github.com/MarcoEidinger/SwagGen/tree/foundation/SwiftSAPURLSession
//

import Foundation

extension ARService.AnnotationAnchor {

    /** Update an existing annotation */
    internal enum UdpateAnnotation {

        internal static let service = APIService<Response>(id: "udpateAnnotation", tag: "annotationAnchor", method: "PUT", path: "/annotationAnchor", hasBody: true)

        internal final class Request: APIRequest<Response> {

            internal var body: AnnotationAnchor

            internal init(body: AnnotationAnchor, encoder: RequestEncoder? = nil) {
                self.body = body
                super.init(service: UdpateAnnotation.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }
        }

        internal enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            internal typealias SuccessType = Void

            /** Invalid ID supplied */
            case status400

            /** AnnotationAnchor not found */
            case status404

            /** Validation exception */
            case status405

            internal var success: Void? {
                switch self {
                default: return nil
                }
            }

            internal var response: Any {
                switch self {
                default: return ()
                }
            }

            internal var statusCode: Int {
                switch self {
                case .status400: return 400
                case .status404: return 404
                case .status405: return 405
                }
            }

            internal var successful: Bool {
                switch self {
                case .status400: return false
                case .status404: return false
                case .status405: return false
                }
            }

            internal init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 400: self = .status400
                case 404: self = .status404
                case 405: self = .status405
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            internal var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            internal var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
