//
// Generated by SwagGen with template `SwiftSAPURLSession`
// https://github.com/MarcoEidinger/SwagGen/tree/sap/Swift-SAPURLSession
//

import Foundation

extension ARService.File {

    /**
    Delete file data (reality, usdz or image) by id

    Delete contents of a file
    */
    internal enum DeleteFileById {

        internal static let service = APIService<Response>(id: "deleteFileById", tag: "file", method: "DELETE", path: "/file/{fileId}", hasBody: false)

        internal final class Request: APIRequest<Response> {

            internal struct Options {

                /** ID of file */
                internal var fileId: String

                internal init(fileId: String) {
                    self.fileId = fileId
                }
            }

            internal var options: Options

            internal init(options: Options) {
                self.options = options
                super.init(service: DeleteFileById.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            internal convenience init(fileId: String) {
                let options = Options(fileId: fileId)
                self.init(options: options)
            }

            internal override var path: String {
                return super.path.replacingOccurrences(of: "{" + "fileId" + "}", with: "\(self.options.fileId)")
            }
        }

        internal enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            internal typealias SuccessType = String

            /** successful operation */
            case status204(String)

            /** Business user is not authenticated */
            case status401

            /** File not found */
            case status404

            /** Invalid request path or method */
            case status405

            /** Server internal error */
            case status500

            internal var success: String? {
                switch self {
                case .status204(let response): return response
                default: return nil
                }
            }

            internal var response: Any {
                switch self {
                case .status204(let response): return response
                default: return ()
                }
            }

            internal var statusCode: Int {
                switch self {
                case .status204: return 204
                case .status401: return 401
                case .status404: return 404
                case .status405: return 405
                case .status500: return 500
                }
            }

            internal var successful: Bool {
                switch self {
                case .status204: return true
                case .status401: return false
                case .status404: return false
                case .status405: return false
                case .status500: return false
                }
            }

            internal init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 204: self = try .status204(decoder.decode(String.self, from: data))
                case 401: self = .status401
                case 404: self = .status404
                case 405: self = .status405
                case 500: self = .status500
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            internal var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            internal var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
