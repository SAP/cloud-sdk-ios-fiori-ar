//
// Generated by SwagGen with template `SwiftSAPURLSession`
// https://github.com/MarcoEidinger/SwagGen/tree/foundation/SwiftSAPURLSession
//

import Foundation

extension ARService.Scene {

    /**
    Get scenes

    Returns multiple scenes
    */
    internal enum GetScenes {

        internal static let service = APIService<Response>(id: "getScenes", tag: "scene", method: "GET", path: "/scenes", hasBody: false)

        internal final class Request: APIRequest<Response> {

            internal struct Options {

                /** Language */
                internal var language: String?

                internal init(language: String? = nil) {
                    self.language = language
                }
            }

            internal var options: Options

            internal init(options: Options) {
                self.options = options
                super.init(service: GetScenes.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            internal convenience init(language: String? = nil) {
                let options = Options(language: language)
                self.init(options: options)
            }

            internal override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let language = options.language {
                  params["language"] = language
                }
                return params
            }
        }

        internal enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            internal typealias SuccessType = [Scene]

            /** successful operation */
            case status200([Scene])

            internal var success: [Scene]? {
                switch self {
                case .status200(let response): return response
                }
            }

            internal var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            internal var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            internal var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            internal init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([Scene].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            internal var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            internal var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
