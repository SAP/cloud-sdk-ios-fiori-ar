//
// Generated by SwagGen with template `SwiftSAPURLSession`
// https://github.com/MarcoEidinger/SwagGen/tree/foundation/SwiftSAPURLSession
//

import Foundation

extension ARService.Scene {

    /**
    Delete a specific scene

    Deletes a specific scene
    */
    internal enum DeleteSceneById {

        internal static let service = APIService<Response>(id: "deleteSceneById", tag: "scene", method: "DELETE", path: "/scene/{sceneId}", hasBody: false)

        internal final class Request: APIRequest<Response> {

            internal struct Options {

                /** ID of scene to return */
                internal var sceneId: String

                internal init(sceneId: String) {
                    self.sceneId = sceneId
                }
            }

            internal var options: Options

            internal init(options: Options) {
                self.options = options
                super.init(service: DeleteSceneById.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            internal convenience init(sceneId: String) {
                let options = Options(sceneId: sceneId)
                self.init(options: options)
            }

            internal override var path: String {
                return super.path.replacingOccurrences(of: "{" + "sceneId" + "}", with: "\(self.options.sceneId)")
            }
        }

        internal enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            internal typealias SuccessType = Void

            /** scene deleted */
            case status200

            /** Scene not found */
            case status404

            internal var success: Void? {
                switch self {
                case .status200: return ()
                default: return nil
                }
            }

            internal var response: Any {
                switch self {
                default: return ()
                }
            }

            internal var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status404: return 404
                }
            }

            internal var successful: Bool {
                switch self {
                case .status200: return true
                case .status404: return false
                }
            }

            internal init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = .status200
                case 404: self = .status404
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            internal var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            internal var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
