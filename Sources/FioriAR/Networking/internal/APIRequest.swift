//
// Generated by SwagGen with template `SwiftSAPURLSession`
// https://github.com/MarcoEidinger/SwagGen/tree/sap/Swift-SAPURLSession
//

import Foundation

internal class APIRequest<ResponseType: APIResponseValue> {

    internal let service: APIService<ResponseType>
    internal private(set) var queryParameters: [String: Any]
    internal private(set) var formParameters: [String: Any]
    internal let encodeBody: ((RequestEncoder) throws -> Data)?
    internal(set) var headerParameters: [String: String]
    internal var customHeaders: [String: String] = [:]

    internal var headers: [String: String] {
        return headerParameters.merging(customHeaders) { param, custom in return custom }
    }

    internal var path: String {
        return service.path
    }

    internal init(service: APIService<ResponseType>,
                queryParameters: [String: Any] = [:],
                formParameters: [String: Any] = [:],
                headers: [String: String] = [:],
                encodeBody: ((RequestEncoder) throws -> Data)? = nil) {
        self.service = service
        self.queryParameters = queryParameters
        self.formParameters = formParameters
        self.headerParameters = headers
        self.encodeBody = encodeBody
    }
}

extension APIRequest: CustomStringConvertible {

    internal var description: String {
        var string = "\(service.name): \(service.method) \(path)"
        if !queryParameters.isEmpty {
            string += "?" + queryParameters.map {"\($0)=\($1)"}.joined(separator: "&")
        }
        return string
    }
}

extension APIRequest: CustomDebugStringConvertible {

    internal var debugDescription: String {
        var string = description
        if let encodeBody = encodeBody,
            let data = try? encodeBody(JSONEncoder()),
            let bodyString = String(data: data, encoding: .utf8) {
            string += "\nbody: \(bodyString)"
        }
        return string
    }
}

/// A file upload
internal struct UploadFile: Equatable {

    internal let type: FileType
    internal let fileName: String?
    internal let partName: String?
    internal let mimeType: String?

    internal init(type: FileType) {
        self.type = type
        self.fileName = nil
        self.partName = nil
        self.mimeType = nil
    }

    internal init(type: FileType, fileName: String, partName: String, mimeType: String) {
        self.type = type
        self.fileName = fileName
        self.partName = partName
        self.mimeType = mimeType
    }

    internal enum FileType: Equatable {
        case data(Data)
        case url(URL)
    }

    func encode() -> Any {
        return self
    }
}
