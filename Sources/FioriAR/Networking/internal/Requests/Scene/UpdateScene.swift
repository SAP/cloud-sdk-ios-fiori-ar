//
// Generated by SwagGen with template `SwiftSAPURLSession`
// https://github.com/MarcoEidinger/SwagGen/tree/sap/Swift-SAPURLSession
// and modified to handle options correctly!
//

import Foundation

extension ARService.Scene {

    /** Patch update an existing scene */
    internal enum UpdateScene {

        internal static let service = APIService<Response>(id: "updateScene", tag: "scene", method: "PATCH", path: "/scene/{sceneId}", hasBody: true, isUpload: true)

        internal final class Request: APIRequest<Response> {

            internal struct Options {

                /** ID of scene to update */
                internal var sceneId: Int

                /** JSON Scene object that needs to be added to the store */
                internal var scene: String

                internal var files: [UploadFile]

                internal init(sceneId: Int, scene: String, files: [UploadFile]) {
                    self.sceneId = sceneId
                    self.scene = scene
                    self.files = files
                }
            }

            internal var options: Options

            internal init(options: Options) {
                self.options = options
                super.init(service: UpdateScene.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            internal convenience init(sceneId: Int, scene: String, files: [UploadFile]) {
                let options = Options(sceneId: sceneId, scene: scene, files: files)
                self.init(options: options)
            }

            internal override var path: String {
                return super.path.replacingOccurrences(of: "{" + "sceneId" + "}", with: "\(self.options.sceneId)")
            }

            internal override var formParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["scene"] = options.scene
                for file in options.files {
                    if let filename = file.fileName {
                        params[filename] = file
                    }
                }
                return params
            }
        }

        internal enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            internal typealias SuccessType = String

            /** successful operation */
            case status200(String)

            /** Invalid input such as: body is invalid json format, body is missing required property or value, annotation anchor Id is duplicate, sceneId value is not consistent */
            case status400

            /** Business user is not authenticated */
            case status401

            /** Scene not found */
            case status404

            /** Invalid request path or method */
            case status405

            /** Server internal error */
            case status500

            internal var success: String? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            internal var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            internal var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status401: return 401
                case .status404: return 404
                case .status405: return 405
                case .status500: return 500
                }
            }

            internal var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status401: return false
                case .status404: return false
                case .status405: return false
                case .status500: return false
                }
            }

            internal init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = .status200(String(decoding: data, as: UTF8.self)) // Modification: Service returns a simple string and not a JSON and therefore do not use decoder
                case 400: self = .status400
                case 401: self = .status401
                case 404: self = .status404
                case 405: self = .status405
                case 500: self = .status500
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            internal var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            internal var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
