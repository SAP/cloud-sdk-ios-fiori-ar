//
// Generated by SwagGen with template `SwiftSAPURLSession`
// https://github.com/MarcoEidinger/SwagGen/tree/sap/Swift-SAPURLSession
// and modified to handle options correctly!
//

import Foundation

extension ARService.Scene {

    /** Add a new scene */
    internal enum AddScene {

        internal static let service = APIService<Response>(id: "addScene", tag: "scene", method: "POST", path: "/scene", hasBody: true, isUpload: true)

        internal final class Request: APIRequest<Response> {

            internal struct Options {

                /** JSON Scene object that needs to be added to the store */
                internal var scene: String

                internal var files: [UploadFile]

                internal init(scene: String, files: [UploadFile]) {
                    self.scene = scene
                    self.files = files
                }
            }

            internal var options: Options

            internal init(options: Options) {
                self.options = options
                super.init(service: AddScene.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            internal convenience init(scene: String, files: [UploadFile]) {
                let options = Options(scene: scene, files: files)
                self.init(options: options)
            }

            internal override var formParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["scene"] = options.scene
                for file in options.files {
                    if let filename = file.fileName {
                        params[filename] = file
                    }
                }
                return params
            }
        }

        internal enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            internal typealias SuccessType = Scene

            /** successful operation */
            case status201(Scene)

            /** Invalid input such as: No scene parameter, scene is invalid json format, scene is missing required property or value, annotation anchor Id is duplicate, sceneId value is not consistent, use different language for card,  uploading file size beyond max limit, uploading file failed to pass virus scan, uploading file name can't match json property name well */
            case status400

            /** Business user is not authenticated */
            case status401

            /** Invalid request path or method */
            case status405

            /** The scene has existed */
            case status409

            /** Server internal error */
            case status500

            internal var success: Scene? {
                switch self {
                case .status201(let response): return response
                default: return nil
                }
            }

            internal var response: Any {
                switch self {
                case .status201(let response): return response
                default: return ()
                }
            }

            internal var statusCode: Int {
                switch self {
                case .status201: return 201
                case .status400: return 400
                case .status401: return 401
                case .status405: return 405
                case .status409: return 409
                case .status500: return 500
                }
            }

            internal var successful: Bool {
                switch self {
                case .status201: return true
                case .status400: return false
                case .status401: return false
                case .status405: return false
                case .status409: return false
                case .status500: return false
                }
            }

            internal init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 201: self = try .status201(decoder.decode(Scene.self, from: data))
                case 400: self = .status400
                case 401: self = .status401
                case 405: self = .status405
                case 409: self = .status409
                case 500: self = .status500
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            internal var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            internal var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
