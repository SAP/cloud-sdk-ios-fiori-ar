//
// Generated by SwagGen with template `SwiftSAPURLSession`
// https://github.com/MarcoEidinger/SwagGen/tree/sap/Swift-SAPURLSession
//

import Foundation

internal class Card: APIModel {

    /** type */
    public enum ActionType: String, Codable, Equatable, CaseIterable {
        case link = "link"
        case video = "video"
        case phone = "phone"
    }

    internal var language: String

    internal var actionData: String?

    internal var actionText: String?

    /** type */
    internal var actionType: ActionType?

    internal var description: String?

    internal var image: String?

    internal var title: String?

    internal init(language: String, actionData: String? = nil, actionText: String? = nil, actionType: ActionType? = nil, description: String? = nil, image: String? = nil, title: String? = nil) {
        self.language = language
        self.actionData = actionData
        self.actionText = actionText
        self.actionType = actionType
        self.description = description
        self.image = image
        self.title = title
    }

    internal required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        language = try container.decode("language")
        actionData = try container.decodeIfPresent("actionData")
        actionText = try container.decodeIfPresent("actionText")
        actionType = try container.decodeIfPresent("actionType")
        description = try container.decodeIfPresent("description")
        image = try container.decodeIfPresent("image")
        title = try container.decodeIfPresent("title")
    }

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(language, forKey: "language")
        try container.encodeIfPresent(actionData, forKey: "actionData")
        try container.encodeIfPresent(actionText, forKey: "actionText")
        try container.encodeIfPresent(actionType, forKey: "actionType")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(image, forKey: "image")
        try container.encodeIfPresent(title, forKey: "title")
    }

    internal func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Card else { return false }
      guard self.language == object.language else { return false }
      guard self.actionData == object.actionData else { return false }
      guard self.actionText == object.actionText else { return false }
      guard self.actionType == object.actionType else { return false }
      guard self.description == object.description else { return false }
      guard self.image == object.image else { return false }
      guard self.title == object.title else { return false }
      return true
    }

    internal static func == (lhs: Card, rhs: Card) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
